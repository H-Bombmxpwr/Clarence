  responses = [
        "You kiss your mother with that mouth, {}?",
        "That's some colorful language, {}.",
        "Come on now, {}. Did you really need to say that?",
        "{} - LANGUAGE!",
        "Hey now {}, watch your mouth.",
        "We don't use that kind of language here, {}.",
        "{} you can be more creative than that.",
        "{}, you absolute loser, do better",
        
    ]
  
  
  
  
  
  
  
  
  
  
  
  
  
  # wolfram query
  #if message.content.startswith("$q"):
   # value = message.content.split("$q ",1)[1]
   # app_id = 'Q8QLWJ-ET2J2WVPLX'
   # client1 = wolframalpha.Client(app_id)
   # res = client1.query(value)
   # print("Appears to have returned wolfram correctly")
   # answer = next(res.results)['subpod']['img']['@src']
   # answertxt = next(res.results).text
   # await message.channel.send("Input: \"" + value + '\", recognized as \"' + next(res.results)['@title'] + '\"')
   # await message.channel.send('Image:')
   # await message.channel.send(answer)
   # await message.channel.send('Plaintext: \n' + answertxt)


   old wolfram query




     if message.content.startswith('$about'):
    await message.channel.send("Welcome to Hunter's Bot! \nThis bot has no purpose. \n \nIt generates insults with the $i command, compliments with the $c command, grabs the lichess daily puzzle with $p daily, $g to spam a user, and answers virtually any question with $q. \n \nSpecial permission commands include $e & $del to manage the manmade database and $c-$j-$k-$t-$h for specific response protocols. \n \n Made by H-Bombmxpwr#2243")
    if message.author.id == 239605426033786881:
      await message.channel.send("https://pbs.twimg.com/media/DhXNpOeWkAE-yDE.jpg")


  old about send




  Old trivia code
  # trivia section
  if message.content.startswith("$v"):
    value = message.content.split("$v ",1)[1]
    if value.startswith("l") or value.startswith("list"):
      embedVar = discord.Embed(title= "Trivia Commands", description = "‚Ä¢\'$v question\' will generate a random multiple choice question that can be answered within 60 seconds by the user\n‚Ä¢\'$v list\' will give a list of trivia commands", color=0x8b0000).set_thumbnail(url = 'https://lakevieweast.com/wp-content/uploads/trivia-stock-scaled.jpg')
      await message.channel.send(embed=embedVar)
    
    if value.startswith("q"):
      info = get_question()
      answers = [info[5],info[4],info[3],info[2]]
      correct_answer = info[2]
      random.shuffle(answers)
      question = info[1]
      category = info[0]
      embedVar = discord.Embed(title = "Random Triva Question" , description = " Category: " + category, color = 0x8b0000 ).set_image(url = 'https://lakevieweast.com/wp-content/uploads/trivia-stock-scaled.jpg')
      embedVar.add_field(name = question, value = "\na. " + answers[0] + "\nb. " + answers[1] + "\nc. " + answers[2] + "\nd. " + answers[3] + "\n \nSend your answer below", inline = False)
      await message.channel.send(embed = embedVar)

      local = answers.index(correct_answer)
      if local == 0:
        ans = 'a'
      elif local == 1:
        ans = 'b'
      elif local == 2:
        ans  = 'c'
      elif local == 3:
        ans = 'd'
      try:
        msg = await client.wait_for("message", check=lambda message: message.author == message.author, timeout = 30)
      
      
        if msg.content.lower() == ans:
          await msg.add_reaction('‚úÖ')
          await message.channel.send("YO YOU ARE RIGHT!! It was " + answers[local])
        else:
          await msg.add_reaction('‚ùå')
          await message.channel.send("WRONG! The correct answer was " + answers[local]+  "\nTry harder next time" )
      except:
          await message.channel.send("Timeout Error: User took to long to respond. Bot is back to normal operations")



#twitter code
# twitter quieries
  if message.content.startswith("$t"):
    value = message.content.split("$t ",1)[1]
    if value.startswith("u") or value.startswith("user"):
      try:

        value = value.split(' ',1)[1]
        user = api.get_user(screen_name = value)
        user_url = user.profile_image_url
        #starts the embed
        embedVar = discord.Embed(title= user.name, description = user.description, color=0x1da1f2).set_thumbnail(url = user_url)
        embedVar.add_field(name = "Follower Count:", value = user.followers_count,inline = False)
        embedVar.add_field(name = "Account Link:", value = 'https://twitter.com/' + user.screen_name)
        await message.channel.send(embed=embedVar)
      except:
        embedVar = discord.Embed(title= "Error", description = "User not found or has a private account", color=0x1da1f2).set_thumbnail(url = 'https://296y67419hmo2gej4j232hyf-wpengine.netdna-ssl.com/wp-content/uploads/2008/12/twitter-bird-light-bgs-300x300.png')
        await message.channel.send(embed=embedVar)

    
    if value.startswith("t") or value.startswith("trends"):
      trends_result = api.get_place_trends(2379574)
      embedVar = discord.Embed(title='Trends in the US', description = 'Top 25 trends on Twitter in the US', color=0x1da1f2).set_thumbnail(url = 'https://static01.nyt.com/images/2014/08/10/magazine/10wmt/10wmt-superJumbo-v4.jpg')

      for trend in trends_result[0]["trends"]:
        embedVar.add_field(name = trend["name"], value = "****", inline = True)
    
      await message.channel.send(embed=embedVar)

    if value.startswith("m"):
      if message.author.id == 239605426033786881:
        timeline = api.home_timeline()
        for tweet in timeline:
          await message.channel.send(f"{tweet.user.name} said {tweet.text}\n \n \n \n \n \n")
      else:
        await message.channel.send("Sorry you don't have permission to look at Hunter's timeline")
    
    if value.startswith("l")or value.startswith("list"):
      embedVar = discord.Embed(title= "Twitter Commands", description = "‚Ä¢\'$t user <username>\' to view a specific users details\n‚Ä¢\'$t trends\' to view whats currently trending in the US\n‚Ä¢\'$t myself\' to view Hunter's timeline\n‚Ä¢\'$t list\' to give a list of twitter commands\n ", color=0x1da1f2).set_thumbnail(url = 'https://296y67419hmo2gej4j232hyf-wpengine.netdna-ssl.com/wp-content/uploads/2008/12/twitter-bird-light-bgs-300x300.png')
      await message.channel.send(embed=embedVar)



ADD WITH AN INPUT SCHEME WHEN YOU HAVE THE CHANCE

if message.content.startswith("$e"):
    if message.author.id == 239605426033786881:

      defender_message = message.content.split("$e " ,1)[1]
      update_data(defender_message)
      await message.channel.send("New Defense Added! Thanks Hottie")
    else:
      await message.channel.send("I noticed you don't have edit permissions, so unfortunately you cannot change this setting. \nSorry Queen!")
  
   

  # deletes from the created database
  if message.content.startswith("$del"):
    if message.author.id == 239605426033786881:
      listin = []
      if "defender3" in db.keys():
        index = int(message.content.split("$del" , 1)[1])
        delete_defender(index)
        listin = db["defender3"]
      await message.channel.send(listin)
    else:
      await message.channel.send("I noticed you don't have edit permissions, so unfortunately you cannot change this setting")
  
  
  # lists the current user database
  if message.content.startswith("$l"):
    listin = []
    if "defender3" in db.keys():
      listin = db["defender3"]
    await message.channel.send(listin)
    await message.channel.send("Database index is " + str(len(listin)))



different Statuses:

# Setting `Playing ` status
await bot.change_presence(activity=discord.Game(name="a game"))

# Setting `Streaming ` status
await bot.change_presence(activity=discord.Streaming(name="My Stream", url=my_twitch_url))

# Setting `Listening ` status
await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name="a song"))

# Setting `Watching ` status
await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name="a movie"))



#The old trolling garabge
if message.content.startswith("BONF CURNTANES" or "bonf curntanes"):
    emoji3 = 'üêÑ'
    await message.add_reaction(emoji3)
    await message.channel.send("What\nthe\nactual\nhell!")

  if message.content.lower().startswith("princess parts"):
    embedVar = discord.Embed(title = "You asked for this"  , desription = " ", color = 0x8b0000 ).set_image(url = "https://cdn.discordapp.com/attachments/757819878844661770/839011749767675944/image0.png")
    await message.channel.send(embed = embedVar)

  
  if message.content.startswith("Smegma" or "smegma"):
    emoji4 = 'üßÄ'
    emoji5 = 'üçÜ'
    await message.add_reaction(emoji5)
    await message.add_reaction(emoji4)
    await message.channel.send("musty")




Old bits function, will add back once find a better way to make It

#convert between bits/hex/decimal
  @commands.command(help = 'convert between bits/hex/decimal')
  async def bits(self,ctx, typ = None,input = None):
    if typ == None:
      await ctx.send('Please specify what you are sending: `ascii` , `decimal`, `hex`,`binary`\ni.e `'+ self.client.command_prefix + 'bits decimal 35`')
    elif input == None:
      await ctx.send('Please add a value to convert\ni.e `'+ self.client.command_prefix + 'bits decimal 35`')
    else:
     if typ.startswith('d'):
      
      try:
        decimal = int(input)
        try:
          asci = str(chr(decimal))
        except:
          asci = "n/a"
        hexa = str(hex(decimal))
        bits = str(bin(decimal))
        
        await ctx.send("Binary: `" + bits + "`\nHex: `" + hexa + "`\nDecimal: `" + str(decimal) + "`\nAscii: `" + asci + "`")
      except:
        await ctx.send('An unknown error occurred, make sure the sent number is an integer')



#personalized help page 
 @commands.command(help = "Provides help for the modules within the bot")
    async def helpc(self, ctx, *input):
        prefix = self.bot.command_prefix
        version =  "12.19.234"
        owner = 239605426033786881
        owner_name = 	"H-Bombmxpwr#2243"

        # checks if cog parameter was given
        # if not: sending all modules and commands not associated with a cog
        if not input:
            # checks if owner is on this server - used to 'tag' owner
            try:
                owner = ctx.guild.get_member(owner).mention

            except AttributeError as e:
                owner = owner_name

            # starting to build embed
            emb = discord.Embed(title='Commands and modules', color=0x280137,
                                description=f'Use `{prefix}help <module>` to gain more information about that module\nUse `{prefix}list: ` for a complete list of commands ')

            # iterating trough cogs, gathering descriptions
            cogs_desc = ''
            for cog in self.bot.cogs:
                cogs_desc += f'`{cog}: ` {self.bot.cogs[cog].__doc__}\n'

            # adding 'list' of cogs to embed
            emb.add_field(name='Modules', value=cogs_desc, inline=False)

            # integrating through uncategorized commands
            commands_desc = ''
            for command in self.bot.walk_commands():
                # if cog not in a cog
                # listing command if cog name is None and command isn't hidden
                if not command.cog_name and not command.hidden:
                    commands_desc += f'{command.name} - {command.help}\n'

            # adding those commands to embed
            if commands_desc:
                emb.add_field(name='Not belonging to a module', value=commands_desc, inline=False)

            # setting information about author
            emb.add_field(name="About", value=f"\
                                    Made and maintained by {owner}\n ")
            emb.set_footer(text=f"Bot is running {version}")

        # block called when one cog-name is given
        # trying to find matching cog and it's commands
        elif len(input) == 1:

            # iterating trough cogs
            for cog in self.bot.cogs:
                # check if cog is the matching one
                if cog.lower() == input[0].lower():

                    # making title - getting description from doc-string below class
                    emb = discord.Embed(title=f'{cog} - Commands', description=self.bot.cogs[cog].__doc__,
                                        color=0x280137)

                    # getting commands from cog
                    for command in self.bot.get_cog(cog).get_commands():
                        # if cog is not hidden
                        if not command.hidden:
                            emb.add_field(name=f"`{prefix}{command.name}: `", value=command.help, inline=False)
                    # found cog - breaking loop
                    break

            # if input not found
            # yes, for-loops have an else statement, it's called when no 'break' was issued
            else:
                emb = discord.Embed(title="Module error!",
                                    description=f"There is no module by that name, modules are groups of commands",
                                    color=discord.Color.red())

        # too many cogs requested - only one at a time allowed
        elif len(input) > 1:
            emb = discord.Embed(title="Module Error!",
                                description="Please request only one module at once",
                                color=discord.Color.red())

        else:
            emb = discord.Embed(title="Error",
                                description="An error occurrd with your request, try reformatting and sending it again",
                                color=discord.Color.red())

        # sending reply embed using our own function defined above
        await send_embed(ctx, emb)

    


  async def send_embed(ctx, embed):
    
    try:
        await ctx.send(embed=embed)
    except Forbidden:
        try:
            await ctx.send("Hey, seems like I can't send embeds. Please check my permissions :)")
        except Forbidden:
            await ctx.author.send(
                f"Hey, seems like I can't send any message in {ctx.channel.name} on {ctx.guild.name}\n"
                f"May you inform the server team about this issue?", embed=embed)

      